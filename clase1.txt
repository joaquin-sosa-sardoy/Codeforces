SUBARREGLOS:
Formula de determinar la cantidad de SUBARREGLOS: n.(n+1) / 2
Tomemos i y j la cantidad que saco de elementos para formar el subarreglo.

SUMAS PARCIALES

A = Arreglo original
S = Auxiliar

S[0] = 0;
For i = 0 to n do:
S[i+1] = S[i] + A[i]

i=0
S[1] = S[0] + A[0]
S[1] = 0 + 1
S[1] = 1

i=1
S[2] = S[1] + A[1]
S[2] = 1 + 4
S[2] = 5

. . . 

*[1,4,3,0,-7,10] ---> [0,1,5,8,8,1,11]
[1,2,6,1,1,7,1] ---> [0,1,3,9,10,11,18,19]
 
Suma (de *)en [2,5) = s[5] - s[2] = -4


Otro ejemplo:
A = [-5, 10, 1, -2, 3]
0 -5 5 6 4 7 
12 = rta de la suma maxima parcial

SOL:

Buscar el minimo:
Entonces:


Min - S[i] (max) = x 

si x>max => max = x

CODE IN C++:

#include <bits/stdc++.h>

using namespace std;

int main(){
    ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    int n,k,elem;
    cin>> n >> k >> elem;

    vector<int>original;
    vector<int> arr;

    arr.push_back(0);

    for(int i=0; i<n; i++){
        original.push_back(elem);
    }
    for(int i=0; i<n; i++){
        arr.push_back(arr[i]+original[i]);
    }
    //Aca tengo mi array para las sumas
    
    int res = arr[0];
    int prevmin = 0;
    for(int i=0; i<n+1;i++){
        res = max(res, arr[i] - prevmin);
        prevmin = min(prevmin, arr[i]);
    }
    cout<<res;
    Esto siempre da 7 (con el arreglo 1 2 6 1 7 1 1 y k cualquiera. (k no hace nada))
}